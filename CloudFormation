### CLOUD FORMATION SCRIPT

http://awsdocs.s3.amazonaws.com/AWSCloudFormation/latest/cfn-ug.pdf
https://s3.amazonaws.com/cloudformation-templates-us-east-1/WordPress_Single_Instance_With_RDS.template
https://github.com/markitx/cloud-formation-templates/blob/master/vpc.template
https://s3.amazonaws.com/cloudformation-templates-us-east-1/vpc_multiple_subnets.template
http://awsdocs.s3.amazonaws.com/VPC/latest/vpc-ug.pdf





A template is a JavaScript Object Notation (JSON) text file that contains the configuration information
about the AWS resources you want to create in the stack. In this particular sample template, it includes
six top-level sections: AWSTemplateFormatVersion, Description, Parameters, Mappings, Resources,
and Outputs; however, only the Resources section is required.


Let's take a look at a very basic template. The following template declares a single resource of type
AWS::S3::Bucket: with the name HelloBucket.


{
 "Resources" : {
 "HelloBucket" : {
 "Type" : "AWS::S3::Bucket"
 }
 }
}

SETUP VPC WITH PRIVATE / PUBLIC SUBNET , NAT INSTANCE , ROUTING TABLES
---------------------------------------------------------------------------------------------------------
FOR singapore region 

1. create VPC with two subnets , Public & Private Subnets . 
2. public subnet with EIP & IGW & Route 
3. Create NAT & assign EIP & Add route in Private subnet
4. Discover security groups wherever required.





{
  "AWSTemplateFormatVersion" : "2016-03-26",
  "Description" : "VPC with Private and Public Subnet with a NAT for Private",
  "Resources" : {
    "cfVPC" : {
       "Type" : "AWS::EC2::VPC",
       "Properties" : { 
       "CidrBlock" : "10.0.0.0/16",
       "EnableDnsSupport" : "true",
       "EnableDnsHostnames" : "true", 
       "InstanceTenancy" : "default",
       "Tags" : [ {"Key" : "Tagname", "Value" : "TagDetails"} ]
  }
},
   
     "cfPublicSubnet" : {
 "Type" : "AWS::EC2::Subnet",
 "Properties" : {
 "VpcId" : { "Ref" : "cfVPC" },
 "CidrBlock" : "10.0.1.0/24",
 "Tags" : [ { "Key" : "SubnetNetwork", "Value" : "Public" } ]
    }
 },


    "cfInternetGateway" : {
 "Type" : "AWS::EC2::InternetGateway",
 "Properties" : {
 "Tags" : [ {"Key" : "cfIgwName", "Value" : "cfIgwVPC"}]
    }
 },
 
     "cfAttachGateway" : {
       "Type" : "AWS::EC2::VPCGatewayAttachment",
       "Properties" : {
         "VpcId" : { "Ref" : "cfVPC" },
         "InternetGatewayId" : { "Ref" : "cfInternetGateway" }
       }
    },

     "cfPublicRouteTable" : {
      "Type" : "AWS::EC2::RouteTable",
      "Properties" : {
        "VpcId" : {"Ref" : "cfVPC"},
        "Tags" : [ {"Key" : "cfRouteTable", "Value" : "cfRouteTableVPC" } ]
      }
    },
 
     "cfPublicRoute" : {
      "Type" : "AWS::EC2::Route",
      "DependsOn" : "cfAttachGateway",
      "Properties" : {
        "RouteTableId" : { "Ref" : "cfPublicRouteTable" },
        "DestinationCidrBlock" : "0.0.0.0/0",
        "GatewayId" : { "Ref" : "cfInternetGateway" }
      }
    },
 
     "cfPublicSubnetRouteTableAssociation" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "cfPublicSubnet" },
        "RouteTableId" : { "Ref" : "cfPublicRouteTable" }
      }
    },


     "cfPrivateSubnet" : {
 "Type" : "AWS::EC2::Subnet",
 "Properties" : {
 "VpcId" : { "Ref" : "cfVPC" },
 "CidrBlock" : "10.0.2.0/24",
 "Tags" : [ { "Key" : "SubnetNetwork", "Value" : "Private" } ]
    }
 },
 
     "cfPrivateRouteTable" : {
      "Type" : "AWS::EC2::RouteTable",
      "Properties" : {
        "VpcId" : {"Ref" : "cfVPC"},
        "Tags" : [ {"Key" : "SubnetNetwork", "Value" : "Private" } ]
      }
    },


     "cfPrivateRoute" : {
      "Type" : "AWS::EC2::Route",
      "Properties" : {
        "RouteTableId" : { "Ref" : "cfPrivateRouteTable" },
        "DestinationCidrBlock" : "0.0.0.0/0",
        "InstanceId" : { "Ref" : "cfNATDevice" }
      }
    },


    "cfPrivateSubnetRouteTableAssociation" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "cfPrivateSubnet" },
       }
    },
 
 
    "cfNATDevice" : {
      "Type" : "AWS::EC2::Instance",
      "Properties" : {
        "InstanceType" : "t1.micro",
        "KeyName" : { "Ref" : "KeyName" },
        "SubnetId" : { "Ref" : "cfPublicSubnet" },
        "SourceDestCheck" : "false",
        "ImageId" : { "Fn::FindInMap" : [ "AWSNATAMI", { "Ref" : "AWS::Region" }, "AMI" ]},
        "SecurityGroupIds" : [{ "Ref" : "NATSecurityGroup" }],
        "Tags" : [ {"Key" : "Name", "Value" : "NAT Device"} ]
      }
    },
 
 
    "cfNATIPAddress" : {
      "Type" : "AWS::EC2::EIP",
      "DependsOn" : "cfGatewayToInternet",
      "Properties" : {
        "Domain" : "vpc",
        "InstanceId" : { "Ref" : "cfNATDevice" }
      }
    },



    
    
    
    
    
    
    
    
    
    
    







 
 
 
 













